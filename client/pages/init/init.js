var qcloud = require('../../vendor/wafer2-client-sdk/index')
var config = require('../../config')
var GS = require("../../utils/tf");

const game = new GS({
    operators:['+','-','/']
});

//const puzzles = game.getDifficultPuzzles(1);

/**
 * 简单
 * 100题
 * 连加、加减、或用简单乘法可以解决的算式
 */
const level1 = [
[1,11,6,6],
[4,4,8,8],
[2,6,6,10],
[3,4,8,9],
[3,6,6,9],
[3,6,7,8],
[4,4,4,12],
[4,6,6,8],
[5,6,6,7],
[6,6,6,6],
[1,12,6,6],
[1,5,9,10],
[1,1,1,12],
[1,1,1,8],
[1,1,2,8],
[1,1,11,2],
[1,1,12,2],
[1,1,2,13],
[1,1,3,6],
[1,1,3,7],
[1,1,3,8],
[1,1,3,9],
[1,1,3,12],
[1,1,4,5],
[1,1,4,6],
[1,1,4,7],
[1,1,4,8],
[1,1,4,12],
[1,1,5,5],
[1,1,5,6],
[1,1,10,13],
[1,1,11,12],
[1,1,11,13],
[1,1,6,12],
[1,1,12,13],
[1,1,13,13],
[1,2,2,6],
[1,2,2,10],
[1,2,2,11],
[1,2,2,12],
[1,2,2,13],
[1,2,3,4],
[1,2,3,5],
[1,2,3,6],
[1,2,3,8],
[1,2,3,10],
[1,2,4,4],
[1,2,4,6],
[1,2,4,8],
[1,2,4,11],
[1,2,4,12],
[1,2,4,13],
[1,2,5,7],
[1,2,5,8],
[1,2,5,12],
[1,2,6,6],
[1,2,6,7],
[1,2,6,8],
[1,2,6,12],
[1,2,9,13],
[1,2,10,12],
[1,2,10,13],
[1,2,11,11],
[2,2,2,3],
[1,2,11,13],
[2,2,2,4],
[1,2,12,13],
[1,2,13,13],
[1,3,3,5],
[1,3,6,12],
[1,3,5,13],
[1,3,4,12],
[1,5,12,7],
[2,2,3,9],
[2,6,9,11],
[2,6,6,12],
[2,8,8,12],
[2,9,9,12],
[2,10,10,12],
[3,3,4,6],
[3,3,12,12],
[3,4,10,12],
[3,4,11,13],
[3,5,5,8],
[3,5,6,9],
[3,6,6,8],
[4,6,6,7],
[4,6,13,13],
[4,6,10,12],
[5,5,6,7],
[4,5,10,11],
[4,5,12,13],
[4,6,9,13],
[4,6,8,12],
[5,5,11,13],
[6,7,12,13],
[9,10,11,12],
[10,11,12,13],
[12,12,11,12],
[12,12,12,12]
];

/**
 * 中等
 * 100题
 * 在简单的基础上，增加除法
 * 或非常规加减，如21+3，20+4，28-4，30-6，26-2,16+8
 */
const level2 = [
[1,5,9,11],
[1,1,6,8],
[1,1,6,9],
[1,1,7,10],
[1,1,8,8],
[1,2,3,7],
[1,2,3,9],
[1,2,4,9],
[1,2,4,10],
[1,2,5,10],
[1,2,6,9],
[1,2,7,8],
[1,2,7,10],
[1,2,7,11],
[1,2,8,8],
[1,2,8,9],
[1,2,8,10],
[1,3,8,9],
[1,3,8,10],
[1,3,7,7],
[1,3,7,12],
[1,3,11,12],
[1,3,12,13],
[1,4,4,4],
[1,4,4,6],
[1,4,4,9],
[1,4,4,11],
[1,4,5,5],
[1,4,5,7],
[1,4,6,6],
[1,4,12,12],
[1,5,5,12],
[1,5,12,12],
[1,5,9,12],
[1,5,7,13],
[1,5,10,11],
[1,5,10,13],
[1,5,11,12],
[1,6,10,12],
[1,9,9,12],
[2,2,5,5],
[2,2,5,7],
[2,2,5,8],
[2,2,7,10],
[2,2,10,13],
[2,6,6,6], //加
[2,6,7,13],
[2,6,10,10],
[2,13,13,13],
[3,3,3,3],
[3,3,3,5],
[3,3,3,9],
[3,3,6,6],
[3,4,5,10],
[3,4,6,12],
[3,4,9,12],
[3,5,6,8],
[3,5,6,10],
[3,5,7,10],
[3,5,9,13],
[3,5,10,10],
[3,5,11,11],
[3,6,7,10],
[3,8,10,12],
[3,9,9,9],
[4,4,4,4],
[4,5,5,8],
[4,5,8,8],
[4,6,5,11],
[4,6,5,12],
[4,7,8,9],
[4,8,8,8],
[4,10,11,12],
[5,5,5,12],
[5,5,5,5],
[5,6,8,10],
[5,7,11,11],
[5,6,6,10],
[5,6,7,12],
[5,7,10,12],
[5,8,8,8],
[5,8,9,11],
[5,8,9,12],
[5,5,7,10],
[5,10,10,12],
[6,6,8,12],
[6,6,8,8],
[6,8,9,10],
[4,12,12,12], //加
[6,9,10,11],
[6,9,9,12],
[6,9,12,13],
[6,12,12,12],
[6,12,13,13],
[7,8,8,11],
[7,8,9,10],
[8,8,8,12],
[3,4,5,6], //加
[9,12,12,12],
[10,10,10,12]
];

/**
 * 困难
 * 100题
 * 15+9等更非常规解法
 * 35-11
 * 33-9
 */
const level3 = [
    [1,2,5,9],
    [1,2,9,11],
    [1,3,3,8],
    [1,3,5,6],
    [1,3,7,10],
    [1,3,8,11],
    [1,3,9,10],
    [1,4,4,8],
    [1,4,4,12],
    [1,4,5,9],
    [1,4,6,10],
    [1,5,5,6],
    [1,5,5,10],
    [1,5,6,7],
    [1,5,6,11],
    [1,5,7,10],
    [1,5,8,13],
    [1,6,8,8],
    [1,7,12,13],
    [2,2,3,10],
    [2,2,4,9],
    [2,2,9,12],
    [2,3,5,7],
    [2,3,5,8],
    [2,3,8,10],
    [2,3,9,9],
    [2,3,10,10],
    [2,3,11,11],
    [2,4,4,9],
    [2,4,5,5],
    [2,4,6,11],
    [2,4,7,7],
    [2,4,7,12],
    [2,4,9,10],
    [2,4,10,11],
    [2,5,5,9],
    [2,5,6,9],
    [2,5,7,9],
    [2,5,7,11],
    [2,5,8,8],
    [2,9,13,13],
    [2,10,12,13],
    [2,11,12,13],
    [3,3,3,11],
    [3,3,4,13],
    [3,4,7,11],
    [3,4,8,13],
    [3,4,9,9],
    [3,4,9,13],
    [3,4,10,10],
    [3,5,7,8],
    [3,5,7,11],
    [3,5,12,12],
    [3,6,6,10],
    [3,6,9,13],
    [3,6,10,10],
    [3,7,8,11],
    [3,8,9,13],
    [4,4,4,10],
    [4,4,7,13],
    [4,5,6,11],
    [4,5,7,13],
    [4,5,9,13],
    [4,5,10,10],
    [4,6,6,9],
    [4,8,9,13],
    [4,8,12,12],
    [4,10,10,11],
    [4,11,12,13],
    [5,6,6,8],
    [5,6,6,12],
    [5,6,7,9],
    [5,6,10,10],
    [5,6,10,12],
    [5,7,12,12],
    [5,5,6,11],
    [5,8,12,12],
    [5,10,13,13],
    [5,11,12,12],
    [6,7,9,9],
    [6,7,10,10],
    [6,7,11,11],
    [6,6,6,9],
    [6,6,6,10],
    [6,8,11,12],
    [6,8,11,13],
    [6,9,11,13],
    [7,7,9,10],
    [6,6,9,13],
    [8,8,8,11],
    [8,8,8,13],
    [8,9,9,12],
    [9,9,9,12],
    [6,7,8,12],
    [7,8,10,11],
    [7,9,11,12],
    [7,9,12,12],
    [7,10,12,13],
    [7,12,12,13],
    [9,11,12,12]
];

/**
 * 大师
 * 28题
 * 大数相减、相除算法
 * (11*11-1)/5
 */
const level4 = [
    [1,5,11,11],
    [1,7,13,13],
    [1,6,11,13],
    [2,4,11,12],
    [2,3,8,13],
    [2,7,8,9],
    [2,8,8,10],
    [3,3,7,13],
    [3,5,7,13],
    [3,6,6,11],
    [3,7,9,13],
    [3,8,8,10],
    [4,8,8,11],
    [4,8,8,13],
    [4,4,10,10],
    [4,4,4,11],
    [5,9,10,11],
    [5,8,9,13],
    [5,10,10,11],
    [5,10,10,13],
    [6,7,7,11],
    [9,11,12,13],
    [7,8,8,10],
    [7,8,8,13],
    [6,8,9,11],
    [6,8,8,9],
    [6,11,12,12],
    [6,12,12,13]
]

/**
 * 英雄
 * 20题
 * 基本要用分数解法
 * 经典难题
 */
const level5 = [
    [1,2,7,7],
    [1,3,4,6],
    [1,4,5,6],
    [1,5,5,5],
    [1,6,6,8],
    [1,8,12,12],
    [2,2,2,9],
    [2,2,11,11],
    [2,2,13,13],
    [2,3,5,12],
    [2,4,10,10],
    [2,7,7,10],
    [2,6,9,9],
    [2,5,5,10],
    [6,9,9,10],
    [3,3,7,7],
    [3,3,8,8],
    [4,4,7,7],
    [5,5,7,11],
    [5,7,7,11]
]

const levels = [
    level1,
    level2,
    level3,
    level4,
    level5
]

levels.map((level,index)=>{
    console.log(index, level.length)
})

level3.map(puz=>{
    //console.log(game.getExpression(puz));
})

level5.map(puz=>{
    console.log(level4.join("|").match(new RegExp(puz.toString())));
    console.log(level3.join("|").match(new RegExp(puz.toString())));
    console.log(level2.join("|").match(new RegExp(puz.toString())));
    console.log(level1.join("|").match(new RegExp(puz.toString())));
    //console.log(game.getExpression(puz));
})

level4.map(puz=>{
    console.log(level5.join("|").match(new RegExp(puz.toString())));
    console.log(level3.join("|").match(new RegExp(puz.toString())));
    console.log(level2.join("|").match(new RegExp(puz.toString())));
    console.log(level1.join("|").match(new RegExp(puz.toString())));
    //console.log(game.getExpression(puz));
})
level3.map(puz=>{
    console.log(level5.join("|").match(new RegExp(puz.toString())));
    console.log(level4.join("|").match(new RegExp(puz.toString())));
    console.log(level2.join("|").match(new RegExp(puz.toString())));
    console.log(level1.join("|").match(new RegExp(puz.toString())));
    //console.log(game.getExpression(puz));
})
level2.map(puz=>{
    console.log(level5.join("|").match(new RegExp(puz.toString())));
    console.log(level4.join("|").match(new RegExp(puz.toString())));
    console.log(level3.join("|").match(new RegExp(puz.toString())));
    console.log(level1.join("|").match(new RegExp(puz.toString())));
    //console.log(game.getExpression(puz));
})


Page({
    data: {

    },
    onLoad: function () {

    },
    onReady: function () {

    },

    /**
     * 生命周期函数--监听页面显示
     */
    onShow: function () {
    },

    /**
     * 生命周期函数--监听页面隐藏
     */
    onHide: function () {
    },

    /**
     * 生命周期函数--监听页面卸载
     */
    onUnload: function () {
        clearInterval(timer);
    },

    /**
     * 页面相关事件处理函数--监听用户下拉动作
     */
    onPullDownRefresh: function () {

    },

    /**
     * 页面上拉触底事件的处理函数
     */
    onReachBottom: function () {

    },

    /**
     * 用户点击右上角分享
     */
    onShareAppMessage: function () {

    },
    
    initLevel: function(e) {
        /*
        let { currentTarget: { id } } = e;
        id = id >> 0;
        
        qcloud.request({
            url: config.service.courseUrl,
            login: false,
            method: 'POST',
            data: {
                levels: levels[id-2],
                course: id,
                t: new Date().getTime()
            },
            success(result) {
                console.log(result);
            },
            fail(error) {
                console.log('request fail', error);
            }
        })
        */

    }

})